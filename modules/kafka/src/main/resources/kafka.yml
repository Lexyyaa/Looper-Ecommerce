# 🔧 공통(global) kafka 설정 — 멀티모듈에서 공통으로 import
spring:
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS}      # 브로커 주소(멀티모듈 공통)
    client-id: ${spring.application.name}        # 클라이언트 식별(로그/모니터링에서 구분)
    properties:
      spring.json.add.type.headers: false        # JsonSerializer가 Java 타입 헤더 붙이지 않게(우린 직접 헤더 정의)
      request.timeout.ms: 20000                  # Kafka 요청 타임아웃
      retry.backoff.ms: 500                      # 재시도 사이 백오프
      auto:
        create.topics.enable: false              # 토픽 자동생성 OFF(운영 안전)
        register.schemas: false                  # 스키마레지스트리 사용 안 함
        offset.reset: latest                     # 초기 오프셋: 최신부터
      use.latest.version: true                   # 클라이언트 최신 프로토콜 사용
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer  # ⬅️ POJO → JSON
      retries: 3                                 # 브로커 레벨 재시도(앱 레벨 RetryTemplate도 별도 적용)
    consumer:
      group-id: loopers-default-consumer         # 기본 그룹(앱별 @KafkaListener에서 덮어씀)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer # ⬅️ byte[] 로 받음
      properties:
        enable-auto-commit: false                # 수동 커밋(ack) 전제
    listener:
      ack-mode: manual                           # 수동 ack(컨테이너 기본값 — 우리 factory에서 다시 명시)

---
spring.config.activate.on-profile: local, test

spring:
  kafka:
    bootstrap-servers: localhost:19092           # 로컬/테스트는 도커 브로커(예시)
    admin:
      properties:
        bootstrap.servers: kafka:9092            # Admin 클라이언트가 쓸 주소(테스트 컨테이너 등)


---
spring.config.activate.on-profile: dev

---
spring.config.activate.on-profile: qa

---
spring.config.activate.on-profile: prd
