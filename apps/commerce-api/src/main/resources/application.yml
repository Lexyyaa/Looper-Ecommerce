server:
  port: 8081
  shutdown: graceful
  tomcat:
    threads:
      max: 200 # 최대 워커 스레드 수 (default : 200)
      min-spare: 10 # 최소 유지 스레드 수 (default : 10)
    connection-timeout: 1m # 연결 타임아웃 (ms) (default : 60000ms = 1m)
    max-connections: 8192 # 최대 동시 연결 수 (default : 8192)
    accept-count: 100 # 대기 큐 크기 (default : 100)
    keep-alive-timeout: 60s # 60s
  max-http-request-header-size: 8KB

spring:
  main:
    web-application-type: servlet
  application:
    name: commerce-api
  profiles:
    active: local
  config:
    import:
      - jpa.yml
      - redis.yml
      - logging.yml
      - kafka.yml
      - monitoring.yml

management:
  server:
    port: 8091

springdoc:
  use-fqn: true
  swagger-ui:
    path: /swagger-ui.html

kafka:
  topic:
    activity-events: activity-events
    catalog-like-events:  catalog-like-events
    catalog-view-events:  catalog-view-events
    catalog-product-events: catalog-product-events
    consumer-dlq: consumer-dlq
    producer-dlq: producer-dlq

ranking:
  key-prefix: rank:daily
  top-k: 10
  daily-ttl-days: 1
  carry-over-alpha: 0.10

---
spring:
  config:
    activate:
      on-profile: test

  kafka:
    bootstrap-servers: ${spring.embedded.kafka.brokers}
    producer:
      acks: all
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

kafka:
  topic:
    activity-events: activity-events-test
    producer-dlq:    producer-dlq-test
    catalog-events:  catalog-events-test
    sku-events:    sku-events-test

pg:
  base-url: localhost:18080

---
spring:
  config:
    activate:
      on-profile: local

pg:
  userid: songcommerce
  base-url: http://localhost:8080
  callback:
    base-url: http://localhost:8080/api/v1
    transaction-path: /pg/callback

kafka:
  topic:
    activity-events: activity-events
    catalog-events:  catalog-events
    sku-events:    sku-events
    producer-dlq:    producer-dlq

---
spring:
  config:
    activate:
      on-profile: dev

---
spring:
  config:
    activate:
      on-profile: qa

---
spring:
  config:
    activate:
      on-profile: prd

springdoc:
  api-docs:
    enabled: false
---
spring.config.activate.on-profile: docker

datasource:
  mysql-jpa:
    main:
      jdbc-url: jdbc:mysql://mysql:3306/loopers
      username: application
      password: application

  redis:
    master:
      host: redis-master
      port: 6379
    replicas:
      - host: redis-readonly
        port: 6379


feign:
  client:
    config:
      pgClient:
        connectTimeout: 500
        readTimeout: 1000

resilience4j:
  retry:
    instances:
      pg-request: # 결제요청(쓰기)
        max-attempts: 3
        wait-duration: 200ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2.0
        enable-randomized-wait: true
        fail-after-max-attempts: true
        retry-exceptions:
          - feign.RetryableException
          - java.net.SocketTimeoutException
        ignore-exceptions:
          - feign.FeignException

      pg-read: # 상태조회(읽기
        max-attempts: 2
        wait-duration: 150ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2.0
        enable-randomized-wait: true
        fail-after-max-attempts: true
        retry-exceptions:
          - feign.RetryableException
          - java.net.SocketTimeoutException
        ignore-exceptions:
          - feign.FeignException

  circuitbreaker:
    instances:
      pg-request:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 20
        failure-rate-threshold: 50
        slow-call-duration-threshold: 800ms
        slow-call-rate-threshold: 60
        permitted-number-of-calls-in-half-open-state: 3
        minimum-number-of-calls: 10
        wait-duration-in-open-state: 5s

  ratelimiter:
    instances:
      pg-request:
        limit-for-period: 20
        limit-refresh-period: 1s
        timeout-duration: 100ms

